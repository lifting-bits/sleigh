name: Build

on:
  push:
    branches:
      - '*'

  pull_request:
    branches:
      - '*'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [RelWithDebInfo, Debug]
        release: [stable, HEAD]

    steps:
    - uses: actions/checkout@v1

    - name: Setup Git User for Applying Patches
      # See this thread for more details https://github.community/t/github-actions-bot-email-address/17204/5
      run: |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

    - name: Generate cache key
      id: cache_key
      run: echo ::set-output name=VALUE::build_${{ matrix.os }}_type-${{ matrix.build_type }}-${{ matrix.release }}

    - name: Update the cache (ccache)
      uses: actions/cache@v1.0.3
      with:
        path: "${{ github.workspace }}/ccache"
        key: ${{ steps.cache_key.outputs.VALUE }}_ccache

    - name: Create the cache
      run: |
        mkdir -p "${{ github.workspace }}/ccache"
        echo "CCACHE_DIR=${{ github.workspace }}/ccache" >> $GITHUB_ENV

    - name: Install Linux system dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y \
          ccache \
          ninja-build \
          clang \
          rpm \
          doxygen \
          xdot \
          graphviz

    - name: Install macOS system dependencies
      if: runner.os == 'macOS'
      run: |
        brew install \
          ccache \
          ninja \
          cmake \
          doxygen \
          graphviz

    - name: Install CMake
      if: runner.os == 'Linux'
      id: cmake_installer
      run: |
        sudo snap install --classic cmake

    - name: Configure the project
      run: |
        cmake \
          -S . \
          -B build \
          -G Ninja \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DSLEIGH_GHIDRA_RELEASE_TYPE=${{ matrix.release }} \
          -DSLEIGH_ENABLE_TESTS=ON \
          -DSLEIGH_ENABLE_EXAMPLES=ON \
          -DSLEIGH_ENABLE_PACKAGING=ON

    - name: Build the project
      run: |
        cmake \
          --build build \
          -v

    - name: Run the tests
      run: |
        ( cd build && ctest -V )

    - name: Run the example
      run: |
        cmake \
          --build build \
          --target sleighexample_runner

    - name: Run the install target
      run: |
        cmake --install build \
          --prefix install

    - name: Create the packages
      run: |
        cmake \
          --build build \
          --target package

    - name: Test the DEB package
      if: runner.os == 'Linux'
      run: |
        sudo dpkg -i build/*.deb

        cmake \
          -S tests/find_package \
          -B find_package_build

        cmake \
          --build find_package_build --verbose

    - name: Locate the packages (RelWithDebInfo only)
      if: matrix.build_type == 'RelWithDebInfo'
      id: package_locations
      run: |
        echo ::set-output name=DEB_PACKAGE_PATH::$(ls build/*.deb)
        echo ::set-output name=DEB_PACKAGE_NAME::$(cd build && ls *.deb)

        echo ::set-output name=RPM_PACKAGE_PATH::$(ls build/*.rpm)
        echo ::set-output name=RPM_PACKAGE_NAME::$(cd build && ls *.rpm)

        echo ::set-output name=TGZ_PACKAGE_PATH::$(ls build/*.tar.gz)
        echo ::set-output name=TGZ_PACKAGE_NAME::$(cd build && ls *.tar.gz)

    - name: Upload the DEB package artifact (RelWithDebInfo only)
      if: matrix.build_type == 'RelWithDebInfo' && runner.os == 'Linux'
      uses: actions/upload-artifact@v1
      with:
        name: ${{ steps.package_locations.outputs.DEB_PACKAGE_NAME }}
        path: ${{ steps.package_locations.outputs.DEB_PACKAGE_PATH }}

    - name: Upload the RPM package artifact (RelWithDebInfo only)
      if: matrix.build_type == 'RelWithDebInfo' && runner.os == 'Linux'
      uses: actions/upload-artifact@v1
      with:
        name: ${{ steps.package_locations.outputs.RPM_PACKAGE_NAME }}
        path: ${{ steps.package_locations.outputs.RPM_PACKAGE_PATH }}

    - name: Upload the TGZ package artifact (RelWithDebInfo only)
      if: matrix.build_type == 'RelWithDebInfo'
      uses: actions/upload-artifact@v1
      with:
        name: ${{ steps.package_locations.outputs.TGZ_PACKAGE_NAME }}
        path: ${{ steps.package_locations.outputs.TGZ_PACKAGE_PATH }}
